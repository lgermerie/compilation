Grammar

    0 $accept: programme $end

    1 programme: liste_declarations liste_fonctions

    2 liste_declarations: liste_declarations declaration
    3                   | %empty

    4 liste_fonctions: liste_fonctions fonction
    5                | fonction

    6 declaration: type liste_declarateurs ';'

    7 liste_declarateurs: liste_declarateurs ',' declarateur
    8                   | declarateur

    9 declarateur: IDENTIFICATEUR
   10            | declarateur '[' CONSTANTE ']'

   11 fonction: type IDENTIFICATEUR '(' liste_parms ')' '{' liste_declarations liste_instructions '}'
   12         | EXTERN type IDENTIFICATEUR '(' liste_parms ')' ';'

   13 type: VOID
   14     | INT

   15 liste_parms: liste_parms ',' parm
   16            | parm
   17            | %empty

   18 parm: INT IDENTIFICATEUR

   19 liste_instructions: liste_instructions instruction
   20                   | %empty

   21 instruction: iteration
   22            | selection
   23            | saut
   24            | affectation ';'
   25            | bloc
   26            | appel

   27 iteration: FOR '(' affectation ';' condition ';' affectation ')' instruction
   28          | WHILE '(' condition ')' instruction

   29 selection: IF '(' condition ')' instruction
   30          | IF '(' condition ')' instruction ELSE instruction
   31          | SWITCH '(' expression ')' instruction
   32          | CASE CONSTANTE ':' instruction
   33          | DEFAULT ':' instruction

   34 saut: BREAK ';'
   35     | RETURN ';'
   36     | RETURN expression ';'

   37 affectation: variable '=' expression

   38 bloc: '{' liste_declarations liste_instructions '}'

   39 appel: IDENTIFICATEUR '(' liste_expressions ')' ';'

   40 variable: IDENTIFICATEUR
   41         | variable '[' expression ']'

   42 expression: '(' expression ')'
   43           | expression binary_op expression
   44           | MOINS expression
   45           | CONSTANTE
   46           | variable
   47           | IDENTIFICATEUR '(' liste_expressions ')'

   48 liste_expressions: liste_expressions ',' expression
   49                  | expression
   50                  | %empty

   51 condition: NOT '(' condition ')'
   52          | condition binary_rel condition
   53          | '(' condition ')'
   54          | expression binary_comp expression

   55 binary_op: PLUS
   56          | MOINS
   57          | MUL
   58          | DIV
   59          | LSHIFT
   60          | RSHIFT
   61          | BAND
   62          | BOR

   63 binary_rel: LAND
   64           | LOR

   65 binary_comp: LT
   66            | GT
   67            | GEQ
   68            | LEQ
   69            | EQ
   70            | NEQ


Terminals, with rules where they appear

$end (0) 0
'(' (40) 11 12 27 28 29 30 31 39 42 47 51 53
')' (41) 11 12 27 28 29 30 31 39 42 47 51 53
',' (44) 7 15 48
':' (58) 32 33
';' (59) 6 12 24 27 34 35 36 39
'=' (61) 37
'[' (91) 10 41
']' (93) 10 41
'{' (123) 11 38
'}' (125) 11 38
error (256)
IDENTIFICATEUR (258) 9 11 12 18 39 40 47
CONSTANTE (259) 10 32 45
VOID (260) 13
INT (261) 14 18
FOR (262) 27
WHILE (263) 28
IF (264) 29 30
ELSE (265) 30
SWITCH (266) 31
CASE (267) 32
DEFAULT (268) 33
BREAK (269) 34
RETURN (270) 35 36
PLUS (271) 55
MOINS (272) 44 56
MUL (273) 57
DIV (274) 58
LSHIFT (275) 59
RSHIFT (276) 60
BAND (277) 61
BOR (278) 62
LAND (279) 63
LOR (280) 64
LT (281) 65
GT (282) 66
GEQ (283) 67
LEQ (284) 68
EQ (285) 69
NEQ (286) 70
NOT (287) 51
EXTERN (288) 12
THEN (289)
OP (290)
REL (291)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
programme (48)
    on left: 1, on right: 0
liste_declarations (49)
    on left: 2 3, on right: 1 2 11 38
liste_fonctions (50)
    on left: 4 5, on right: 1 4
declaration (51)
    on left: 6, on right: 2
liste_declarateurs (52)
    on left: 7 8, on right: 6 7
declarateur (53)
    on left: 9 10, on right: 7 8 10
fonction (54)
    on left: 11 12, on right: 4 5
type (55)
    on left: 13 14, on right: 6 11 12
liste_parms (56)
    on left: 15 16 17, on right: 11 12 15
parm (57)
    on left: 18, on right: 15 16
liste_instructions (58)
    on left: 19 20, on right: 11 19 38
instruction (59)
    on left: 21 22 23 24 25 26, on right: 19 27 28 29 30 31 32 33
iteration (60)
    on left: 27 28, on right: 21
selection (61)
    on left: 29 30 31 32 33, on right: 22
saut (62)
    on left: 34 35 36, on right: 23
affectation (63)
    on left: 37, on right: 24 27
bloc (64)
    on left: 38, on right: 25
appel (65)
    on left: 39, on right: 26
variable (66)
    on left: 40 41, on right: 37 41 46
expression (67)
    on left: 42 43 44 45 46 47, on right: 31 36 37 41 42 43 44 48 49
    54
liste_expressions (68)
    on left: 48 49 50, on right: 39 47 48
condition (69)
    on left: 51 52 53 54, on right: 27 28 29 30 51 52 53
binary_op (70)
    on left: 55 56 57 58 59 60 61 62, on right: 43
binary_rel (71)
    on left: 63 64, on right: 52
binary_comp (72)
    on left: 65 66 67 68 69 70, on right: 54


State 0

    0 $accept: . programme $end

    $default  reduce using rule 3 (liste_declarations)

    programme           go to state 1
    liste_declarations  go to state 2


State 1

    0 $accept: programme . $end

    $end  shift, and go to state 3


State 2

    1 programme: liste_declarations . liste_fonctions
    2 liste_declarations: liste_declarations . declaration

    VOID    shift, and go to state 4
    INT     shift, and go to state 5
    EXTERN  shift, and go to state 6

    liste_fonctions  go to state 7
    declaration      go to state 8
    fonction         go to state 9
    type             go to state 10


State 3

    0 $accept: programme $end .

    $default  accept


State 4

   13 type: VOID .

    $default  reduce using rule 13 (type)


State 5

   14 type: INT .

    $default  reduce using rule 14 (type)


State 6

   12 fonction: EXTERN . type IDENTIFICATEUR '(' liste_parms ')' ';'

    VOID  shift, and go to state 4
    INT   shift, and go to state 5

    type  go to state 11


State 7

    1 programme: liste_declarations liste_fonctions .
    4 liste_fonctions: liste_fonctions . fonction

    VOID    shift, and go to state 4
    INT     shift, and go to state 5
    EXTERN  shift, and go to state 6

    $default  reduce using rule 1 (programme)

    fonction  go to state 12
    type      go to state 13


State 8

    2 liste_declarations: liste_declarations declaration .

    $default  reduce using rule 2 (liste_declarations)


State 9

    5 liste_fonctions: fonction .

    $default  reduce using rule 5 (liste_fonctions)


State 10

    6 declaration: type . liste_declarateurs ';'
   11 fonction: type . IDENTIFICATEUR '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    IDENTIFICATEUR  shift, and go to state 14

    liste_declarateurs  go to state 15
    declarateur         go to state 16


State 11

   12 fonction: EXTERN type . IDENTIFICATEUR '(' liste_parms ')' ';'

    IDENTIFICATEUR  shift, and go to state 17


State 12

    4 liste_fonctions: liste_fonctions fonction .

    $default  reduce using rule 4 (liste_fonctions)


State 13

   11 fonction: type . IDENTIFICATEUR '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    IDENTIFICATEUR  shift, and go to state 18


State 14

    9 declarateur: IDENTIFICATEUR .
   11 fonction: type IDENTIFICATEUR . '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    '('  shift, and go to state 19

    $default  reduce using rule 9 (declarateur)


State 15

    6 declaration: type liste_declarateurs . ';'
    7 liste_declarateurs: liste_declarateurs . ',' declarateur

    ';'  shift, and go to state 20
    ','  shift, and go to state 21


State 16

    8 liste_declarateurs: declarateur .
   10 declarateur: declarateur . '[' CONSTANTE ']'

    '['  shift, and go to state 22

    $default  reduce using rule 8 (liste_declarateurs)


State 17

   12 fonction: EXTERN type IDENTIFICATEUR . '(' liste_parms ')' ';'

    '('  shift, and go to state 23


State 18

   11 fonction: type IDENTIFICATEUR . '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    '('  shift, and go to state 19


State 19

   11 fonction: type IDENTIFICATEUR '(' . liste_parms ')' '{' liste_declarations liste_instructions '}'

    INT  shift, and go to state 24

    $default  reduce using rule 17 (liste_parms)

    liste_parms  go to state 25
    parm         go to state 26


State 20

    6 declaration: type liste_declarateurs ';' .

    $default  reduce using rule 6 (declaration)


State 21

    7 liste_declarateurs: liste_declarateurs ',' . declarateur

    IDENTIFICATEUR  shift, and go to state 27

    declarateur  go to state 28


State 22

   10 declarateur: declarateur '[' . CONSTANTE ']'

    CONSTANTE  shift, and go to state 29


State 23

   12 fonction: EXTERN type IDENTIFICATEUR '(' . liste_parms ')' ';'

    INT  shift, and go to state 24

    $default  reduce using rule 17 (liste_parms)

    liste_parms  go to state 30
    parm         go to state 26


State 24

   18 parm: INT . IDENTIFICATEUR

    IDENTIFICATEUR  shift, and go to state 31


State 25

   11 fonction: type IDENTIFICATEUR '(' liste_parms . ')' '{' liste_declarations liste_instructions '}'
   15 liste_parms: liste_parms . ',' parm

    ','  shift, and go to state 32
    ')'  shift, and go to state 33


State 26

   16 liste_parms: parm .

    $default  reduce using rule 16 (liste_parms)


State 27

    9 declarateur: IDENTIFICATEUR .

    $default  reduce using rule 9 (declarateur)


State 28

    7 liste_declarateurs: liste_declarateurs ',' declarateur .
   10 declarateur: declarateur . '[' CONSTANTE ']'

    '['  shift, and go to state 22

    $default  reduce using rule 7 (liste_declarateurs)


State 29

   10 declarateur: declarateur '[' CONSTANTE . ']'

    ']'  shift, and go to state 34


State 30

   12 fonction: EXTERN type IDENTIFICATEUR '(' liste_parms . ')' ';'
   15 liste_parms: liste_parms . ',' parm

    ','  shift, and go to state 32
    ')'  shift, and go to state 35


State 31

   18 parm: INT IDENTIFICATEUR .

    $default  reduce using rule 18 (parm)


State 32

   15 liste_parms: liste_parms ',' . parm

    INT  shift, and go to state 24

    parm  go to state 36


State 33

   11 fonction: type IDENTIFICATEUR '(' liste_parms ')' . '{' liste_declarations liste_instructions '}'

    '{'  shift, and go to state 37


State 34

   10 declarateur: declarateur '[' CONSTANTE ']' .

    $default  reduce using rule 10 (declarateur)


State 35

   12 fonction: EXTERN type IDENTIFICATEUR '(' liste_parms ')' . ';'

    ';'  shift, and go to state 38


State 36

   15 liste_parms: liste_parms ',' parm .

    $default  reduce using rule 15 (liste_parms)


State 37

   11 fonction: type IDENTIFICATEUR '(' liste_parms ')' '{' . liste_declarations liste_instructions '}'

    $default  reduce using rule 3 (liste_declarations)

    liste_declarations  go to state 39


State 38

   12 fonction: EXTERN type IDENTIFICATEUR '(' liste_parms ')' ';' .

    $default  reduce using rule 12 (fonction)


State 39

    2 liste_declarations: liste_declarations . declaration
   11 fonction: type IDENTIFICATEUR '(' liste_parms ')' '{' liste_declarations . liste_instructions '}'

    VOID  shift, and go to state 4
    INT   shift, and go to state 5

    $default  reduce using rule 20 (liste_instructions)

    declaration         go to state 8
    type                go to state 40
    liste_instructions  go to state 41


State 40

    6 declaration: type . liste_declarateurs ';'

    IDENTIFICATEUR  shift, and go to state 27

    liste_declarateurs  go to state 15
    declarateur         go to state 16


State 41

   11 fonction: type IDENTIFICATEUR '(' liste_parms ')' '{' liste_declarations liste_instructions . '}'
   19 liste_instructions: liste_instructions . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51
    '}'             shift, and go to state 52

    instruction  go to state 53
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 42

   39 appel: IDENTIFICATEUR . '(' liste_expressions ')' ';'
   40 variable: IDENTIFICATEUR .

    '('  shift, and go to state 61

    $default  reduce using rule 40 (variable)


State 43

   27 iteration: FOR . '(' affectation ';' condition ';' affectation ')' instruction

    '('  shift, and go to state 62


State 44

   28 iteration: WHILE . '(' condition ')' instruction

    '('  shift, and go to state 63


State 45

   29 selection: IF . '(' condition ')' instruction
   30          | IF . '(' condition ')' instruction ELSE instruction

    '('  shift, and go to state 64


State 46

   31 selection: SWITCH . '(' expression ')' instruction

    '('  shift, and go to state 65


State 47

   32 selection: CASE . CONSTANTE ':' instruction

    CONSTANTE  shift, and go to state 66


State 48

   33 selection: DEFAULT . ':' instruction

    ':'  shift, and go to state 67


State 49

   34 saut: BREAK . ';'

    ';'  shift, and go to state 68


State 50

   35 saut: RETURN . ';'
   36     | RETURN . expression ';'

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    ';'             shift, and go to state 72
    '('             shift, and go to state 73

    variable    go to state 74
    expression  go to state 75


State 51

   38 bloc: '{' . liste_declarations liste_instructions '}'

    $default  reduce using rule 3 (liste_declarations)

    liste_declarations  go to state 76


State 52

   11 fonction: type IDENTIFICATEUR '(' liste_parms ')' '{' liste_declarations liste_instructions '}' .

    $default  reduce using rule 11 (fonction)


State 53

   19 liste_instructions: liste_instructions instruction .

    $default  reduce using rule 19 (liste_instructions)


State 54

   21 instruction: iteration .

    $default  reduce using rule 21 (instruction)


State 55

   22 instruction: selection .

    $default  reduce using rule 22 (instruction)


State 56

   23 instruction: saut .

    $default  reduce using rule 23 (instruction)


State 57

   24 instruction: affectation . ';'

    ';'  shift, and go to state 77


State 58

   25 instruction: bloc .

    $default  reduce using rule 25 (instruction)


State 59

   26 instruction: appel .

    $default  reduce using rule 26 (instruction)


State 60

   37 affectation: variable . '=' expression
   41 variable: variable . '[' expression ']'

    '['  shift, and go to state 78
    '='  shift, and go to state 79


State 61

   39 appel: IDENTIFICATEUR '(' . liste_expressions ')' ';'

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    '('             shift, and go to state 73

    $default  reduce using rule 50 (liste_expressions)

    variable           go to state 74
    expression         go to state 80
    liste_expressions  go to state 81


State 62

   27 iteration: FOR '(' . affectation ';' condition ';' affectation ')' instruction

    IDENTIFICATEUR  shift, and go to state 82

    affectation  go to state 83
    variable     go to state 60


State 63

   28 iteration: WHILE '(' . condition ')' instruction

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    NOT             shift, and go to state 84
    '('             shift, and go to state 85

    variable    go to state 74
    expression  go to state 86
    condition   go to state 87


State 64

   29 selection: IF '(' . condition ')' instruction
   30          | IF '(' . condition ')' instruction ELSE instruction

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    NOT             shift, and go to state 84
    '('             shift, and go to state 85

    variable    go to state 74
    expression  go to state 86
    condition   go to state 88


State 65

   31 selection: SWITCH '(' . expression ')' instruction

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    '('             shift, and go to state 73

    variable    go to state 74
    expression  go to state 89


State 66

   32 selection: CASE CONSTANTE . ':' instruction

    ':'  shift, and go to state 90


State 67

   33 selection: DEFAULT ':' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 91
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 68

   34 saut: BREAK ';' .

    $default  reduce using rule 34 (saut)


State 69

   40 variable: IDENTIFICATEUR .
   47 expression: IDENTIFICATEUR . '(' liste_expressions ')'

    '('  shift, and go to state 92

    $default  reduce using rule 40 (variable)


State 70

   45 expression: CONSTANTE .

    $default  reduce using rule 45 (expression)


State 71

   44 expression: MOINS . expression

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    '('             shift, and go to state 73

    variable    go to state 74
    expression  go to state 93


State 72

   35 saut: RETURN ';' .

    $default  reduce using rule 35 (saut)


State 73

   42 expression: '(' . expression ')'

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    '('             shift, and go to state 73

    variable    go to state 74
    expression  go to state 94


State 74

   41 variable: variable . '[' expression ']'
   46 expression: variable .

    '['  shift, and go to state 78

    $default  reduce using rule 46 (expression)


State 75

   36 saut: RETURN expression . ';'
   43 expression: expression . binary_op expression

    PLUS    shift, and go to state 95
    MOINS   shift, and go to state 96
    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102
    ';'     shift, and go to state 103

    binary_op  go to state 104


State 76

    2 liste_declarations: liste_declarations . declaration
   38 bloc: '{' liste_declarations . liste_instructions '}'

    VOID  shift, and go to state 4
    INT   shift, and go to state 5

    $default  reduce using rule 20 (liste_instructions)

    declaration         go to state 8
    type                go to state 40
    liste_instructions  go to state 105


State 77

   24 instruction: affectation ';' .

    $default  reduce using rule 24 (instruction)


State 78

   41 variable: variable '[' . expression ']'

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    '('             shift, and go to state 73

    variable    go to state 74
    expression  go to state 106


State 79

   37 affectation: variable '=' . expression

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    '('             shift, and go to state 73

    variable    go to state 74
    expression  go to state 107


State 80

   43 expression: expression . binary_op expression
   49 liste_expressions: expression .

    PLUS    shift, and go to state 95
    MOINS   shift, and go to state 96
    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102

    $default  reduce using rule 49 (liste_expressions)

    binary_op  go to state 104


State 81

   39 appel: IDENTIFICATEUR '(' liste_expressions . ')' ';'
   48 liste_expressions: liste_expressions . ',' expression

    ','  shift, and go to state 108
    ')'  shift, and go to state 109


State 82

   40 variable: IDENTIFICATEUR .

    $default  reduce using rule 40 (variable)


State 83

   27 iteration: FOR '(' affectation . ';' condition ';' affectation ')' instruction

    ';'  shift, and go to state 110


State 84

   51 condition: NOT . '(' condition ')'

    '('  shift, and go to state 111


State 85

   42 expression: '(' . expression ')'
   53 condition: '(' . condition ')'

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    NOT             shift, and go to state 84
    '('             shift, and go to state 85

    variable    go to state 74
    expression  go to state 112
    condition   go to state 113


State 86

   43 expression: expression . binary_op expression
   54 condition: expression . binary_comp expression

    PLUS    shift, and go to state 95
    MOINS   shift, and go to state 96
    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102
    LT      shift, and go to state 114
    GT      shift, and go to state 115
    GEQ     shift, and go to state 116
    LEQ     shift, and go to state 117
    EQ      shift, and go to state 118
    NEQ     shift, and go to state 119

    binary_op    go to state 104
    binary_comp  go to state 120


State 87

   28 iteration: WHILE '(' condition . ')' instruction
   52 condition: condition . binary_rel condition

    LAND  shift, and go to state 121
    LOR   shift, and go to state 122
    ')'   shift, and go to state 123

    binary_rel  go to state 124


State 88

   29 selection: IF '(' condition . ')' instruction
   30          | IF '(' condition . ')' instruction ELSE instruction
   52 condition: condition . binary_rel condition

    LAND  shift, and go to state 121
    LOR   shift, and go to state 122
    ')'   shift, and go to state 125

    binary_rel  go to state 124


State 89

   31 selection: SWITCH '(' expression . ')' instruction
   43 expression: expression . binary_op expression

    PLUS    shift, and go to state 95
    MOINS   shift, and go to state 96
    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102
    ')'     shift, and go to state 126

    binary_op  go to state 104


State 90

   32 selection: CASE CONSTANTE ':' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 127
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 91

   33 selection: DEFAULT ':' instruction .

    $default  reduce using rule 33 (selection)


State 92

   47 expression: IDENTIFICATEUR '(' . liste_expressions ')'

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    '('             shift, and go to state 73

    $default  reduce using rule 50 (liste_expressions)

    variable           go to state 74
    expression         go to state 80
    liste_expressions  go to state 128


State 93

   43 expression: expression . binary_op expression
   44           | MOINS expression .

    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102

    $default  reduce using rule 44 (expression)

    binary_op  go to state 104


State 94

   42 expression: '(' expression . ')'
   43           | expression . binary_op expression

    PLUS    shift, and go to state 95
    MOINS   shift, and go to state 96
    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102
    ')'     shift, and go to state 129

    binary_op  go to state 104


State 95

   55 binary_op: PLUS .

    $default  reduce using rule 55 (binary_op)


State 96

   56 binary_op: MOINS .

    $default  reduce using rule 56 (binary_op)


State 97

   57 binary_op: MUL .

    $default  reduce using rule 57 (binary_op)


State 98

   58 binary_op: DIV .

    $default  reduce using rule 58 (binary_op)


State 99

   59 binary_op: LSHIFT .

    $default  reduce using rule 59 (binary_op)


State 100

   60 binary_op: RSHIFT .

    $default  reduce using rule 60 (binary_op)


State 101

   61 binary_op: BAND .

    $default  reduce using rule 61 (binary_op)


State 102

   62 binary_op: BOR .

    $default  reduce using rule 62 (binary_op)


State 103

   36 saut: RETURN expression ';' .

    $default  reduce using rule 36 (saut)


State 104

   43 expression: expression binary_op . expression

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    '('             shift, and go to state 73

    variable    go to state 74
    expression  go to state 130


State 105

   19 liste_instructions: liste_instructions . instruction
   38 bloc: '{' liste_declarations liste_instructions . '}'

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51
    '}'             shift, and go to state 131

    instruction  go to state 53
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 106

   41 variable: variable '[' expression . ']'
   43 expression: expression . binary_op expression

    PLUS    shift, and go to state 95
    MOINS   shift, and go to state 96
    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102
    ']'     shift, and go to state 132

    binary_op  go to state 104


State 107

   37 affectation: variable '=' expression .
   43 expression: expression . binary_op expression

    PLUS    shift, and go to state 95
    MOINS   shift, and go to state 96
    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102

    $default  reduce using rule 37 (affectation)

    binary_op  go to state 104


State 108

   48 liste_expressions: liste_expressions ',' . expression

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    '('             shift, and go to state 73

    variable    go to state 74
    expression  go to state 133


State 109

   39 appel: IDENTIFICATEUR '(' liste_expressions ')' . ';'

    ';'  shift, and go to state 134


State 110

   27 iteration: FOR '(' affectation ';' . condition ';' affectation ')' instruction

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    NOT             shift, and go to state 84
    '('             shift, and go to state 85

    variable    go to state 74
    expression  go to state 86
    condition   go to state 135


State 111

   51 condition: NOT '(' . condition ')'

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    NOT             shift, and go to state 84
    '('             shift, and go to state 85

    variable    go to state 74
    expression  go to state 86
    condition   go to state 136


State 112

   42 expression: '(' expression . ')'
   43           | expression . binary_op expression
   54 condition: expression . binary_comp expression

    PLUS    shift, and go to state 95
    MOINS   shift, and go to state 96
    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102
    LT      shift, and go to state 114
    GT      shift, and go to state 115
    GEQ     shift, and go to state 116
    LEQ     shift, and go to state 117
    EQ      shift, and go to state 118
    NEQ     shift, and go to state 119
    ')'     shift, and go to state 129

    binary_op    go to state 104
    binary_comp  go to state 120


State 113

   52 condition: condition . binary_rel condition
   53          | '(' condition . ')'

    LAND  shift, and go to state 121
    LOR   shift, and go to state 122
    ')'   shift, and go to state 137

    binary_rel  go to state 124


State 114

   65 binary_comp: LT .

    $default  reduce using rule 65 (binary_comp)


State 115

   66 binary_comp: GT .

    $default  reduce using rule 66 (binary_comp)


State 116

   67 binary_comp: GEQ .

    $default  reduce using rule 67 (binary_comp)


State 117

   68 binary_comp: LEQ .

    $default  reduce using rule 68 (binary_comp)


State 118

   69 binary_comp: EQ .

    $default  reduce using rule 69 (binary_comp)


State 119

   70 binary_comp: NEQ .

    $default  reduce using rule 70 (binary_comp)


State 120

   54 condition: expression binary_comp . expression

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    '('             shift, and go to state 73

    variable    go to state 74
    expression  go to state 138


State 121

   63 binary_rel: LAND .

    $default  reduce using rule 63 (binary_rel)


State 122

   64 binary_rel: LOR .

    $default  reduce using rule 64 (binary_rel)


State 123

   28 iteration: WHILE '(' condition ')' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 139
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 124

   52 condition: condition binary_rel . condition

    IDENTIFICATEUR  shift, and go to state 69
    CONSTANTE       shift, and go to state 70
    MOINS           shift, and go to state 71
    NOT             shift, and go to state 84
    '('             shift, and go to state 85

    variable    go to state 74
    expression  go to state 86
    condition   go to state 140


State 125

   29 selection: IF '(' condition ')' . instruction
   30          | IF '(' condition ')' . instruction ELSE instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 141
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 126

   31 selection: SWITCH '(' expression ')' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 142
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 127

   32 selection: CASE CONSTANTE ':' instruction .

    $default  reduce using rule 32 (selection)


State 128

   47 expression: IDENTIFICATEUR '(' liste_expressions . ')'
   48 liste_expressions: liste_expressions . ',' expression

    ','  shift, and go to state 108
    ')'  shift, and go to state 143


State 129

   42 expression: '(' expression ')' .

    $default  reduce using rule 42 (expression)


State 130

   43 expression: expression . binary_op expression
   43           | expression binary_op expression .

    $default  reduce using rule 43 (expression)

    binary_op  go to state 104


State 131

   38 bloc: '{' liste_declarations liste_instructions '}' .

    $default  reduce using rule 38 (bloc)


State 132

   41 variable: variable '[' expression ']' .

    $default  reduce using rule 41 (variable)


State 133

   43 expression: expression . binary_op expression
   48 liste_expressions: liste_expressions ',' expression .

    PLUS    shift, and go to state 95
    MOINS   shift, and go to state 96
    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102

    $default  reduce using rule 48 (liste_expressions)

    binary_op  go to state 104


State 134

   39 appel: IDENTIFICATEUR '(' liste_expressions ')' ';' .

    $default  reduce using rule 39 (appel)


State 135

   27 iteration: FOR '(' affectation ';' condition . ';' affectation ')' instruction
   52 condition: condition . binary_rel condition

    LAND  shift, and go to state 121
    LOR   shift, and go to state 122
    ';'   shift, and go to state 144

    binary_rel  go to state 124


State 136

   51 condition: NOT '(' condition . ')'
   52          | condition . binary_rel condition

    LAND  shift, and go to state 121
    LOR   shift, and go to state 122
    ')'   shift, and go to state 145

    binary_rel  go to state 124


State 137

   53 condition: '(' condition ')' .

    $default  reduce using rule 53 (condition)


State 138

   43 expression: expression . binary_op expression
   54 condition: expression binary_comp expression .

    PLUS    shift, and go to state 95
    MOINS   shift, and go to state 96
    MUL     shift, and go to state 97
    DIV     shift, and go to state 98
    LSHIFT  shift, and go to state 99
    RSHIFT  shift, and go to state 100
    BAND    shift, and go to state 101
    BOR     shift, and go to state 102

    $default  reduce using rule 54 (condition)

    binary_op  go to state 104


State 139

   28 iteration: WHILE '(' condition ')' instruction .

    $default  reduce using rule 28 (iteration)


State 140

   52 condition: condition . binary_rel condition
   52          | condition binary_rel condition .

    $default  reduce using rule 52 (condition)

    binary_rel  go to state 124


State 141

   29 selection: IF '(' condition ')' instruction .
   30          | IF '(' condition ')' instruction . ELSE instruction

    ELSE  shift, and go to state 146

    $default  reduce using rule 29 (selection)


State 142

   31 selection: SWITCH '(' expression ')' instruction .

    $default  reduce using rule 31 (selection)


State 143

   47 expression: IDENTIFICATEUR '(' liste_expressions ')' .

    $default  reduce using rule 47 (expression)


State 144

   27 iteration: FOR '(' affectation ';' condition ';' . affectation ')' instruction

    IDENTIFICATEUR  shift, and go to state 82

    affectation  go to state 147
    variable     go to state 60


State 145

   51 condition: NOT '(' condition ')' .

    $default  reduce using rule 51 (condition)


State 146

   30 selection: IF '(' condition ')' instruction ELSE . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 148
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 147

   27 iteration: FOR '(' affectation ';' condition ';' affectation . ')' instruction

    ')'  shift, and go to state 149


State 148

   30 selection: IF '(' condition ')' instruction ELSE instruction .

    $default  reduce using rule 30 (selection)


State 149

   27 iteration: FOR '(' affectation ';' condition ';' affectation ')' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 150
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 150

   27 iteration: FOR '(' affectation ';' condition ';' affectation ')' instruction .

    $default  reduce using rule 27 (iteration)
